---
kind: pipeline
name: build-and-deploy-drone-oss

platform:
  os: linux
  arch: amd64

steps:
  - name: clone-drone-repo
    image: docker:git
    commands:
      - git clone --recursive https://github.com/drone/drone.git drone
      - (cd drone && git checkout $(cat ../VERSION))
  - name: apply-patch-dockerfile
    image: alpine:3.11
    commands:
      - patch drone/docker/Dockerfile.server.linux.amd64 < patch/Dockerfile.server.linux.amd64.patch
  - name: download-golang-modules
    image: golang:1.14
    commands:
      - cd drone && go mod vendor && cd --
    environment:
      GOPROXY: https://proxy.golang.org,direct
  - name: apply-patch-gitlab-subgroup
    image: alpine:3.11
    commands:
      - patch drone/vendor/github.com/drone/go-scm/scm/driver/gitlab/repo.go < patch/go-scm/gitlab-repo.go
      - patch drone/vendor/github.com/drone/go-scm/scm/driver/gitlab/util.go < patch/go-scm/gitlab-util.go
      - patch drone/vendor/github.com/drone/go-scm/scm/util.go < patch/go-scm/util.go
  - name: build-drone-oss
    image: golang:1.14
    commands:
      - (cd drone && ../scripts/build.sh)
      - (cd drone && ../scripts/tags.sh) > .tags
    environment:
      CGO_ENABLED: 1
      GO111MODULE: on
      GOARCH: amd64
      GOOS: linux
      GOPROXY: https://proxy.golang.org,direct
  - name: build-standard-image
    image: plugins/docker
    settings:
      context: drone
      dockerfile: drone/docker/Dockerfile.server.linux.amd64
      password:
        from_secret: DOCKERHUB_PASSWORD
      repo:
        from_secret: DOCKERHUB_REPO_OSS
      username:
        from_secret: DOCKERHUB_USERNAME
    # when:
    #   branch:
    #     - master
    #   event:
    #     - push
    #   repo:
    #     - JustinTW/drone-oss

trigger:
  branch:
    - master
  event:
    - pull_request
    - push

---
kind: pipeline
name: build-and-deploy-drone-nolimit

platform:
  os: linux
  arch: amd64

steps:
  - name: clone-drone-repo
    image: docker:git
    commands:
      - git clone --recursive https://github.com/drone/drone.git drone
      - (cd drone && git checkout $(cat ../VERSION))
  - name: apply-patch-dockerfile
    image: alpine:3.11
    commands:
      - patch drone/docker/Dockerfile.server.linux.amd64 < patch/Dockerfile.server.linux.amd64.patch
  - name: download-golang-modules
    image: golang:1.14
    commands:
      - cd drone && go mod vendor && cd --
    environment:
      GOPROXY: https://proxy.golang.org,direct
  - name: apply-patch-gitlab-subgroup
    image: alpine:3.11
    commands:
      - patch drone/vendor/github.com/drone/go-scm/scm/driver/gitlab/repo.go < patch/go-scm/gitlab-repo.go
      - patch drone/vendor/github.com/drone/go-scm/scm/driver/gitlab/util.go < patch/go-scm/gitlab-util.go
      - patch drone/vendor/github.com/drone/go-scm/scm/util.go < patch/go-scm/util.go
  - name: build-drone-nolimit
    image: golang:1.14
    commands:
      - (cd drone && ../scripts/build.sh nolimit)
      - (cd drone && ../scripts/tags.sh) > .tags
    environment:
      CGO_ENABLED: 1
      GO111MODULE: on
      GOARCH: amd64
      GOOS: linux
      GOPROXY: https://proxy.golang.org,direct
  - name: build-nolimit-image
    image: plugins/docker
    settings:
      context: drone
      dockerfile: drone/docker/Dockerfile.server.linux.amd64
      password:
        from_secret: DOCKERHUB_PASSWORD
      repo:
        from_secret: DOCKERHUB_REPO_NOLIMIT
      username:
        from_secret: DOCKERHUB_USERNAME
    # when:
    #   branch:
    #     - master
    #   event:
    #     - push
    #   repo:
    #     - JustinTW/drone-oss

trigger:
  branch:
    - master
  event:
    - pull_request
    - push
